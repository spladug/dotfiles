"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" general configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" pedantically move everything into XDG base directory locations
set backupdir=$XDG_DATA_HOME/vim/backup
set directory=$XDG_DATA_HOME/vim/swap
set packpath+=$XDG_CONFIG_HOME/vim
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set undodir=$XDG_DATA_HOME/vim/undo
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo

" syntax highlighting on
syntax enable
filetype plugin indent on

" basic options
set nowrap " don't wrap text
set cpoptions=$ " continue to show the piece of text you're in the process of changing
set modelines=0 " disable modelines for security
set encoding=utf-8 " use utf8 file encoding
set showcmd " show commands while typing
set scrolloff=4 " space around the current line
set gdefault " global replacement by default
set ignorecase " case insensitive searches
set smartcase " unless we specify a capital letter
set hlsearch " highlight search results
set incsearch " search while still typing
set wildmenu " show command line completions
set wildmode=list:longest " list possible entries and autocomplete longest substring
set backspace=indent,eol,start " allow backspace to cut through autoindent, ends of lines, and the start of insert mode
set visualbell " flash the screen instead of beeping
set autoindent " continue indentation if not told otherwise
set relativenumber " show line numbers, relative to current line
set number " but ensure we also have the real line number for the current line
set title " put current edited filename in terminal title
set noshowmode " this is handled by lightline

" default tabulation
set expandtab
set smarttab
set softtabstop=4
set tabstop=4
set shiftwidth=4

" slower python syntax parsing (does a better job at multiline docstrings)
let python_slow_sync=1

" ripgrep
let g:rg_highlight = 1

" load system plugins
set rtp+=/usr/share/vim/vimfiles

" configure various syntax plugins
let g:ale_linters = {
\   'python': ['ruff'],
\}
let g:ale_fixers = {
\   'python': ['black', 'ruff'],
\}
let g:ale_python_ruff_options = '--ignore=T100,T201 --unfixable=ERA001,F401,F841,B007'
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
let g:ale_use_global_executables = 1
let g:rst_style = 1
let g:terraform_fmt_on_save = 1
let g:yaml_recommended_style = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" make space the leader character
let mapleader = " "

" make split navigation a bit cleaner
map <leader>" :split<CR>
map <leader>% :vsplit<CR>
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" keep visual selection after indenting
vmap > >gv
vmap < <gv

" ,t is the file finder
map <leader>t :Files<CR>
" ,b is the buffer finder
map <leader>b :Buffer<CR>
" ,a is the "ack" command (now ripgrep)
map <leader>a :Rg 
" ,e is jump to next ALE error
map <leader>e :ALENext<CR>

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup spladug
    au!

    " make the window title something useful
    au BufEnter * let &titlestring=expand("%:t")

    " mark trailing whitespace
    hi ExtraWhitespace term=NONE cterm=NONE ctermfg=white ctermbg=red
    au BufWinEnter * match ExtraWhitespace /\s\+\%#\@<!$/
augroup END
