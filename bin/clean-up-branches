#!/usr/bin/python

import argparse
import subprocess
import sys


def ls_remote(remote):
    data = subprocess.check_output(('/usr/bin/git', 'ls-remote', '-h', remote))
    for line in data.splitlines():
        thing = line.rstrip('\n').split('\t')[1]
        yield thing


def delete_branch(remote, branch):
    subprocess.check_call(('/usr/bin/git', 'push', remote, ':' + branch))


def main():
    parser = argparse.ArgumentParser(description="clean up obsolete branches")
    parser.add_argument("--noop", dest="noop", action="store_const",
                        const=True, default=False,
                        help="don't do anything, just print")
    parser.add_argument("--remote", dest="remote", default="origin",
                        help="the remote to clean up")
    args = parser.parse_args()

    local_branches = set(ls_remote("."))
    remote_branches = set(ls_remote(args.remote))
    disused_branches = remote_branches - local_branches

    for branch in disused_branches:
        print 'removing %s' % branch
        if not args.noop:
            delete_branch(args.remote, branch)


if __name__ == "__main__":
    sys.exit(main())
